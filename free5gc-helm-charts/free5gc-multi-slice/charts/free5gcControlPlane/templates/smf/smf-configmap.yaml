#
# Software Name : towards5gs-helm
# SPDX-FileCopyrightText: Copyright (c) 2021 Orange
# SPDX-License-Identifier: Apache-2.0
#
# This software is distributed under the Apache License 2.0,
# the text of which is available at todo
# or see the "LICENSE" file for more details.
#
# Author: Abderaouf KHICHANE, Ilhem FAJJARI, Ayoub BOUSSELMI
# Software description: An open-source project providing Helm charts to deploy 5G components (Core + RAN) on top of Kubernetes
#
{{- if .Values.smf.enabled }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Values.smf.configmap.name }}
  labels:
    app: {{ .Values.global.projectName }}
data:
  smfcfg.yaml: |
    info:
      version: 1.0.1
      description: SMF initial local configuration
    
    configuration:
      smfName: SMF
      sbi:
        scheme: {{ .Values.global.sbi.scheme }}
        registerIPv4: {{ .Values.smf.service.name }} # IP used to register to NRF
        bindingIPv4: 0.0.0.0  # IP used to bind the service
        port: {{ .Values.smf.port }}
        tls:
          key: free5gc/support/TLS/smf.key
          pem: free5gc/support/TLS/smf.pem
      serviceNameList:
        - nsmf-pdusession
        - nsmf-event-exposure
        - nsmf-oam
      snssaiInfos:
        - sNssai:
            sst: 1
            sd: 010203
          dnnInfos: # DNN information list
            - dnn: {{ .Values.global.datanetworks.dn1 }} # Data Network Name
              dns: # the IP address of DNS
                ipv4: 8.8.8.8
                ipv6: 2001:4860:4860::8888
              ueSubnet: {{ .Values.global.uesubnet }} # should be CIDR type
      pfcp:
{{- if .Values.global.upf.service.pfcp.enabled }}
        addr: 0.0.0.0
{{- else }}
        addr: {{ .Values.global.smf.n4if.ipAddress }}
{{- end }}
      userplane_information:
{{- if eq .Values.global.userPlaneArchitecture "single" }}
        up_nodes:
          gNB1:
            type: AN
          UPF:
            type: UPF
{{- if .Values.global.upf.service.pfcp.enabled }}
            node_id: {{ .Values.global.upf.service.name }} # UPF N4 address
{{- else }}
            node_id: {{ .Values.global.upf.n4if.ipAddress }} # UPF N4 address
{{- end }}
            sNssaiUpfInfos:
              - sNssai:
                  sst: 1
                  sd: 010203
                dnnUpfInfoList:
                  - dnn: {{ .Values.global.datanetworks.dn1 }}
                    pools:
                      - cidr: {{ .Values.global.uesubnet }} 
            interfaces:
              - interfaceType: N3
                endpoints:
                  - {{ .Values.global.upf.n3if.ipAddress }} # UPF N3 address
                networkInstance: {{ .Values.global.datanetworks.dn1 }}
        links:
          - A: gNB1
            B: UPF
{{- end }}
{{- if eq .Values.global.userPlaneArchitecture "ulcl" }}
        up_nodes:
          gNB1:
            type: AN
            an_ip: {{ .Values.global.gnb.n3if.ipAddress }} 
          BranchingUPF:
            type: UPF
{{- if .Values.global.upf.service.pfcp.enabled }}
            node_id: {{ .Values.global.upfb.service.pfcp.name }} # UPF N4 address
{{- else }}
            node_id: {{ .Values.global.upfb.n4if.ipAddress }} # PFCP address
{{- end }}
            sNssaiUpfInfos:
              - sNssai:
                  sst: 1
                  sd: 010203
                dnnUpfInfoList:
                  - dnn: {{ .Values.global.datanetworks.dn1 }}
            interfaces:
              - interfaceType: N3
                endpoints:
                  - {{ .Values.global.upfb.n3if.ipAddress }} 
                networkInstance: {{ .Values.global.datanetworks.dn1 }}
              - interfaceType: N9
                endpoints:
                  - {{ .Values.global.upfb.n9if.ipAddress }}
                networkInstance: {{ .Values.global.datanetworks.dn1 }}
          AnchorUPF1:
            type: UPF
{{- if .Values.global.upf.service.pfcp.enabled }}
            node_id: {{ .Values.global.upf1.service.pfcp.name }} # UPF N4 address
{{- else }}
            node_id: {{ .Values.global.upf1.n4if.ipAddress }} # PFCP address
{{- end }}
            sNssaiUpfInfos:
              - sNssai:
                  sst: 1
                  sd: 010203
                dnnUpfInfoList:
                  - dnn: {{ .Values.global.datanetworks.dn1 }}
            interfaces:
              - interfaceType: N9
                endpoints:
                  - {{ .Values.global.upf1.n9if.ipAddress }} # UPF1 N9 address
                networkInstance: {{ .Values.global.datanetworks.dn1 }}
          AnchorUPF2:
            type: UPF
{{- if .Values.global.upf.service.pfcp.enabled }}
            node_id: {{ .Values.global.upf2.service.pfcp.name }} # UPF N4 address
{{- else }}
            node_id: {{ .Values.global.upf2.n4if.ipAddress }} # PFCP address
{{- end }}
            sNssaiUpfInfos:
              - sNssai:
                  sst: 1
                  sd: 010203
                dnnUpfInfoList:
                  - dnn: {{ .Values.global.datanetworks.dn1 }}
            interfaces:
              - interfaceType: N9
                endpoints:
                  - {{ .Values.global.upf2.n9if.ipAddress }} # UPF2 N9 address
                networkInstance: {{ .Values.global.datanetworks.dn1 }}
        links:
          - A: gNB1
            B: BranchingUPF
          - A: BranchingUPF
            B: AnchorUPF1
          - A: BranchingUPF
            B: AnchorUPF2
{{- end }}
      ue_subnet: {{ .Values.global.uesubnet }}
      dnn:
        {{ .Values.global.datanetworks.dn1 }}:
          dns:
            ipv4: 8.8.8.8
            ipv6: 2001:4860:4860::8888
      nrfUri: {{ .Values.global.sbi.scheme }}://{{ .Values.nrf.service.name }}:{{ .Values.nrf.port }}
{{- if eq .Values.global.userPlaneArchitecture "ulcl" }}
      ulcl: true
{{- end }}
    logger:
      SMF:
        debugLevel: info
        ReportCaller: false
      NAS:
        debugLevel: info
        ReportCaller: false
      NGAP:
        debugLevel: info
        ReportCaller: false
      Aper:
        debugLevel: info
        ReportCaller: false
      PathUtil:
        debugLevel: info
        ReportCaller: false
      OpenApi:
        debugLevel: info
        ReportCaller: false
      PFCP:
        debugLevel: info
        ReportCaller: false

  uerouting.yaml: |
    info:
      version: 1.0.1
      description: Routing information for UE

#### This script will be able to be using to replace the UPF service name by its IP address. This feature is still not available.
  wrapper.sh: |
    #!/bin/sh

{{- if and .Values.global.upf.service.pfcp.enabled }}
    ### Copy the IP address of UPF service in the SMF configuration. Currently when not doing that the SMF can connect to the UPF but show an error when trying to send a PDU session creation request to the UPF (we think this par of the code has to change).
    cp /free5gc/config2/uerouting.yaml {{ .Values.volume.mount }}
    cp /free5gc/config2/free5GC.yaml {{ .Values.volume.mount }}

{{- if eq .Values.global.userPlaneArchitecture "single" }}
    upfIP=$(nslookup {{ .Values.global.upf.service.pfcp.name }} | grep "Address" | awk '{print $3}')
    sed -i "s/{{ .Values.global.upf.service.pfcp.name }}/$upfIP/g" /free5gc/config2/smfcfg.conf
{{- end }}
{{- if eq .Values.global.userPlaneArchitecture "ulcl" }}
    upfbIP=$(nslookup {{ .Values.global.upfb.service.pfcp.name }} | grep "Address" | awk '{print $3}')
    upf1IP=$(nslookup {{ .Values.global.upf1.service.pfcp.name }} | grep "Address" | awk '{print $3}')
    upf2IP=$(nslookup {{ .Values.global.upf2.service.pfcp.name }} | grep "Address" | awk '{print $3}')
    sed -i "s/{{ .Values.global.upfb.service.pfcp.name }}/$upfbIP/g" /free5gc/config2/smfcfg.yaml
    sed -i "s/{{ .Values.global.upf1.service.pfcp.name }}/$upf1IP/g" /free5gc/config2/smfcfg.yaml
    sed -i "s/{{ .Values.global.upf2.service.pfcp.name }}/$upf2IP/g" /free5gc/config2/smfcfg.yaml
{{- end }}
    cp /free5gc/config2/smfcfg.yaml {{ .Values.volume.mount }}
{{- end }}
    /free5gc/smf/updated-smf -smfcfg {{ .Values.volume.mount }}smfcfg.yaml 
{{- end }}

