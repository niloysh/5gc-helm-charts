#
# Software Name : towards5gs-helm
# SPDX-FileCopyrightText: Copyright (c) 2021 Orange
# SPDX-License-Identifier: Apache-2.0
#
# This software is distributed under the Apache License 2.0,
# the text of which is available at todo
# or see the "LICENSE" file for more details.
#
# Author: Abderaouf KHICHANE, Ilhem FAJJARI, Ayoub BOUSSELMI
# Software description: An open-source project providing Helm charts to deploy 5G components (Core + RAN) on top of Kubernetes
#
{{- if .Values.smf2.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-{{ .Values.smf2.name }}
  labels:
    project: {{ .Values.global.projectName }}
    nf: {{ .Values.smf2.name }}
spec:
  selector:
    matchLabels:
      project: {{ .Values.global.projectName }}
      nf: {{ .Values.smf2.name }}
  replicas: {{ .Values.smf.replicaCount }}
  template:
    metadata:
      labels:
        project: {{ .Values.global.projectName }}
        nf: {{ .Values.smf2.name }}
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/smf/smf-configmap.yaml") . | sha256sum }}-{{ include (print $.Template.BasePath "/global/free5gc-configmap.yaml") . | sha256sum }}
{{- if not .Values.global.upf.service.pfcp.enabled }}
        k8s.v1.cni.cncf.io/networks: '[
          { "name": "{{ .Values.global.n4network.name }}", "interface": "n4", "ips": [ "{{ .Values.global.smf2.n4if.ipAddress }}/{{ .Values.global.n4network.cidr }}" ] }
          ]'
{{- end }}
    spec:
      initContainers:
      - name: wait-nrf
        image: {{ .Values.initcontainers.curl.registry }}/{{ .Values.initcontainers.curl.image }}:{{ .Values.initcontainers.curl.tag }}
        env:
        - name: DEPENDENCIES
          value: {{ .Values.global.sbi.scheme }}://{{ .Values.nrf.service.name }}:{{ .Values.nrf.port }}
        command: ['sh', '-c', 'set -x; for dependency in $DEPENDENCIES; do while [ $(curl --connect-timeout 5 -s -o /dev/null -w "%{http_code}" $dependency) -ne 200 ]; do echo waiting for dependencies; sleep 1; done; done;']
      containers:
      - image: busybox
        name: smf2-logs
        args: [/bin/sh, -c, 'while ! tail -f /var/log/smf-slice-info.log 2>/dev/null; do sleep 1 ; done']
        volumeMounts:
        - mountPath: /var/log/
          name: varlog
      - image: {{ .Values.smf.image.registry }}/{{ .Values.smf.image.name }}:{{ .Values.smf.image.tag }}
        name: {{ .Values.smf2.name }}
        imagePullPolicy: Always
        ports:
        - name: nsmf
          containerPort: {{ .Values.smf2.port }}
        - name: pfcp
          containerPort: {{ .Values.smf2.service.pfcp.port }}
          protocol: {{ .Values.smf2.service.pfcp.protocol }}
{{- if and .Values.global.upf.service.pfcp.enabled }}
        command: ["sh", "-c", "../config2/wrapper.sh"]
{{- else }}
        command: ["sh", "-c", "{{ .Values.volume.mount }}wrapper.sh"]
        # command: [ "sh", "-c", "--" ]
        # args: [ "while true; do sleep 30; done;" ]
{{- end }}
        #command: ["./smf"]
        #args: ["-smfcfg", "../config/smfcfg.yaml"]   
        env:
          - name: GIN_MODE
            value: release
        volumeMounts:
{{- if and .Values.global.upf.service.pfcp.enabled }}
        - mountPath: /free5gc/config2/
{{- else }}
        - mountPath: {{ .Values.volume.mount }}
{{- end }}
          name: {{ .Values.smf2.volume.name }}
        - mountPath: /var/log/
          name: varlog
        resources:
          requests:
            memory: "64Mi"
            cpu: "150m"
          limits:
            memory: "64Mi"
            cpu: "150m"
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      volumes:
      - name: {{ .Values.smf2.volume.name }}
        projected:
          sources:
          - configMap:
              name: {{ .Values.smf2.configmap.name }}
              # All items can be deleted after solving the problem
              items:
              - key: smfcfg.yaml
                path: smfcfg.yaml
              - key: uerouting.yaml
                path: uerouting.yaml
              - key: wrapper.sh
                path: wrapper.sh
                mode: 0777
          - configMap:
              name: {{ .Values.free5gc.configmap.name }}
      - name: varlog
        emptyDir: {}
{{- end }}
